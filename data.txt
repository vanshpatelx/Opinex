========================left work==========================
- When we create auth then also must have to create a user with default balance
- Adding balance
- settlements - CRUD balance and holdings, in cache and also in DB
- if someone placed order and successfully also change in holding too.
===========================================================


Auth: 5001
cache:6379
DB: 5432
# user:${email}
# token includes:
# generateToken({ id: userId.toString(), email, type });
auth_exchange => auth.registered =>  auth_queue
Routes:
GET /auth/health
POST /auth/register:Params:{email}:{password}
POST /auth/login:Params:{email}:{password}


DB Server: 5003


Event: 8000
event_exchange => event.registered =>  event_queue
cache:6380
DB: 5433
# event:{eventID}
# events = live_events:{cursor}:{limit}

Routes: 
GET /event/health
POST /event/Params:{Whole Object}
GET /event/{eventID}
GET /event/events/URLParams:{cursor}:{limit}
POST /event/settlements/Params:{eventID}

Testcases:
1. Write first because it's more needed
Ex.
1. Register
    1. Register a user
    2. Try to register the same user
    3. Try to register a user with invalid email
    4. Try to register a user with invalid password
    5. Try to register a user with invalid Params or Body
2. Login
    1. Login a user
    2. Try to login a user with invalid email
    3. Try to login a user with not registered email
    4. Try to login a user with invalid password
    5. Try to login a user with invalid Params or Body

3. Create an event
    1. Create an event
    2. Try to create an event with invalid Params or Body
    3. Unauthorizaed means not admin user try to create an event
    4. without token try to create an event

4. Get an event
    1. Get an event
    2. Try to get an event with invalid eventID
    3. Try to get an event with invalid Params or Body
    4. without token try to get an event

5. Get all live events
    1. Get all live events
    2. Try to get all live events with invalid Params or Body
    3. without token try to get all live events




Holding

Port: 8081
cache:
User: 6382
Holding: 6381
DB:
User: 5435
Holding: 5434

Balance:UserID:UserID => {balance, locked_balance}

Change in DB Server to Create Automated User
Also if any user give without userID also works


~/learn/opinex/docker/DBS main !4 ?1 ❯ curl -X GET "http://localhost:8080/holdings/balance/?userID=1740929978000112" \                                               Py base 10:49:54 PM
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjE3NDA5Mjk5NzgwMDAxMTIiLCJlbWFpbCI6InVzZXIxQGdtYWlsLmNvbSIsInR5cGUiOiJVU0VSIiwiaWF0IjoxNzQwOTMwNDA3LCJleHAiOjE3NDEwMTY4MDd9.e0SEmsixmqBwIrymlaSXybFMFo3IVLQfOrAItB6Sf2g"

{"balance":5000,"locked_balance":100,"message":"Fetched Balance successfully","userID":"1740929978000112"}%

~/learn/opinex/docker/DBS main !4 ?1 ❯                                                                                                                               Py base 10:49:55 PM


Update Balance:
When Start Server: We copy all data from DB to cache,
Update Balance trigged from:
- holding
- Order
- Trade

EveryOne trigger Holding which is only capable to edit anything,
all other are just read agents




Task:
- Update Balance
- and Send to DB
- if publisher down then
- adding triggers stuffs - Consuming
adding balance data in DB for understand, new trade comes, how balance added


Get Holding Route
Tests

Order Requirements and locking
if quantity is zero delete it


###################################################################################
triggers stuffs
- get holding
- Testcases


Triggers looks like
1. buyOrderPlaced or sellOrderPlaced
2. userID
3. amount
4. orderID


✅ addBalance
✅ decreaseBalance
placeOrder
✅ buyOrderPlaced
✅ sellOrderPlaced

How to store holdings in DB and cache
Holding:{UserID}:{EventID} => quantity:locked_quantity:price

In DB
Holding Primary Key
UserID 
EventID
quantity
locked_quantity
price