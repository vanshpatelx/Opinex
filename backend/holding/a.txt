Holding Server
- CRUD with redis and DB

=> Holdings
Fun
holding by userID
balance by userID

Holding:UserID:UserID
Holding:UserID:*

Balance:UserID


Code Setups
Cache
DB
Test it
Routers
Middleware
- Controllers
- utils when needed


logics
// getBalanceByID
// check same as local and request if role is normal user
// check in Cache
// and check in DB

curl -X GET http://localhost:3005/holdings/balance/1 \
     -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiMSIsInJvbGUiOiJhZG1pbiIsImV4cCI6MTc0MDY1NzI5NX0.mgFGqvCYV_xFsEmSz0qXVLBK-7ODKSUz2XMMZVmUPvs"

curl -X GET "http://localhost:3005/holdings/1" -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiMSIsInJvbGUiOiJhZG1pbiIsImV4cCI6MTc0MDY1NzI5NX0.mgFGqvCYV_xFsEmSz0qXVLBK-7ODKSUz2XMMZVmUPvs"






Holding:UserID:UserID

[{
    "eventID": "1",
    "price": "100",
    "quantity": ""
    "locked": ""
},{
      "eventID": "1",
    "price": "100",
    "quantity": ""
    "locked": ""
}]



========================left work==========================
- Adding balance
Holding DB (2)
Holding Cache (2)
- Middleware Checks
- Adding Dummy table and data

- Function checks
- Write new function => Add Balnace
- test it
=======================================

Test Case:
Get holding means stock avalible
1. Get holding means stock avalible
2. Check user only access their own holdings
3. Admin can access anyone holdings
4. Invalid UserID (Params)
5. Without token
Get Balance
1. Get Balance
2. Check user only access their own balance
3. Admin can access anyone balance
4. without ID can access their own data
5. Without token
Update Balance
1. Update Balance
2. Update user only access their own balance
3. Invalid Params (userID, balance)
4. Without token
