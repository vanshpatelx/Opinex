name: Microservices CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.services }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Detect changed microservices
        id: filter
        run: |
          changed_services=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^backend/' | cut -d'/' -f2 | sort -u)
          echo "Detected changes in: $changed_services"
          echo "services=$(echo $changed_services | jq -R -c 'split(\" \")')" >> $GITHUB_ENV

      - name: Store services as output
        run: echo "services=${{ env.services }}" >> $GITHUB_OUTPUT

  common-setup:
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Dependencies
        run: npm install

  build-auth:
    needs: [detect-changes, common-setup]
    if: contains(fromJson(needs.detect-changes.outputs.services), 'auth')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Auth Service Tests
        run: |
          cd backend/auth
          npm install
          npm test

      - name: Build Auth Service Image (Not Pushed)
        run: |
          docker build -t myrepo/auth-service:latest backend/auth

  build-dummy:
    needs: [detect-changes, common-setup]
    if: contains(fromJson(needs.detect-changes.outputs.services), 'dummy')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Dummy Service Tests
        run: |
          cd backend/dummy
          npm install
          npm test

      - name: Build Dummy Service Image (Not Pushed)
        run: |
          docker build -t myrepo/dummy-service:latest backend/dummy

  integration-tests:
    needs: [build-auth, build-dummy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Docker Compose for Integration Tests
        run: |
          docker compose -f docker-compose.ci.yml up --build -d
          sleep 10
          docker ps
          # Run your integration tests
          npm run test:integration
          docker compose -f docker-compose.ci.yml down

  push-images:
    needs: [integration-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Push Auth Service Image
        if: contains(fromJson(needs.detect-changes.outputs.services), 'auth')
        run: |
          docker tag myrepo/auth-service:latest myrepo/auth-service:${{ github.sha }}
          docker push myrepo/auth-service:${{ github.sha }}

      - name: Push Dummy Service Image
        if: contains(fromJson(needs.detect-changes.outputs.services), 'dummy')
        run: |
          docker tag myrepo/dummy-service:latest myrepo/dummy-service:${{ github.sha }}
          docker push myrepo/dummy-service:${{ github.sha }}


update-k8s:
    needs: [build-auth, build-dummy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Kubernetes YAML with New Versions
        run: |
          if [[ "auth" =~ "${{ needs.detect-changes.outputs.services }}" ]]; then
            sed -i 's|image: myrepo/auth-service:.*|image: myrepo/auth-service:${{ github.sha }}|' k8s/auth-deployment.yaml
          fi

          if [[ "dummy" =~ "${{ needs.detect-changes.outputs.services }}" ]]; then
            sed -i 's|image: myrepo/dummy-service:.*|image: myrepo/dummy-service:${{ github.sha }}|' k8s/dummy-deployment.yaml
          fi

      - name: Commit and Push K8s Updates
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add k8s/*.yaml
          git commit -m "Update Kubernetes YAML versions for changed services"
          git push origin main







name: CI for Monorepo

on:
  push:
    branches:
      - main
  
jobs:
  environment: opinex
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.services }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Detect changed microservices
        id: filter
        run: |
          changed_services=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^backend/' | cut -d'/' -f2 | sort -u)
          echo "Detected changes in: $changed_services"
          echo "services=$(echo $changed_services | jq -R -c 'split(\" \")')" >> $GITHUB_ENV

      - name: Store services as output
        run: echo "services=${{ env.services }}" >> $GITHUB_OUTPUT

  build:
    needs: detect-changes
    runs-on: ubuntu-latest
    environment: opinex

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install Node.js Dependencies
        run: |
          npm install -g turbo
          npm install

      - name: ðŸŒŸ Setup Backend Environment (Variables)
        run: |
          cd scripts/
          chmod +x start.sh
          ./start.sh
      
      # Running docker in resources and check logs if fails
      - name: Configure all Resources in Docker
        run: |
          docker compose -f 'docker/docker-compose.resources.yaml' up -d --build --wait
      - name: Verify Running Containers
        run: docker compose -f 'docker/docker-compose.resources.yaml' ps
      - name: Debug Logs on Failure
        if: failure()
        run: docker compose -f 'docker/docker-compose.resources.yaml' logs
            
      - name: Start Turbo Dev
        run: |
          turbo build
          turbo dev &  # Run in background
          echo $! > turbo_dev.pid  # Save PID

      - name: ðŸŒŸ wait till all servers up
        run: |
          cd scripts/
          chmod +x checkservice.sh
          ./checkservice.sh

      - name: Run Tests in /packages/test (All test)
        run: |
          cd packages/test
          npm run test

      - name: Stop Turbo Dev
        run: |
          if [ -f turbo_dev.pid ]; then
            kill $(cat turbo_dev.pid) || echo "Process already stopped"
            rm turbo_dev.pid
          fi

      - name: Cleanup Resources
        run: |
          docker compose -f 'docker/docker-compose.resources.yaml' down -v

      - name: Build Images
        run: |
          cd scripts/
          chmod +x build_images.sh
          ./build_images.sh

      # Running all in docker
      - name: Configure all images + resources in Docker
        run: |
          docker compose -f 'docker/docker-compose.yaml' up -d --build --wait
      - name: Verify Running Containers
        run: docker compose -f 'docker/docker-compose.yaml' ps
      - name: Debug Logs on Failure
        if: failure()
        run: docker compose -f 'docker/docker-compose.yaml' logs
      
      - name: ðŸŒŸ wait till all servers up (in docker)
        run: |
          cd scripts/
          chmod +x checkservice.sh
          ./checkservice.sh

      - name: Run Tests in /packages/test (All test)
        run: |
          cd packages/test
          npm run test
      

      

      

